(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{578:function(o,e,_){"use strict";_.r(e);var n=_(45),s=Object(n.a)({},(function(){var o=this,e=o.$createElement,_=o._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[_("h1",{attrs:{id:"模块查找规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模块查找规则"}},[o._v("#")]),o._v(" 模块查找规则")]),o._v(" "),_("p",[o._v("查找模块的时候")]),o._v(" "),_("p",[o._v("如果是 node 核心模块，就直接返回模块名称")]),o._v(" "),_("p",[o._v("如果是相对路径引入的模块，会将相对路径和父级路径之间进行一个path.resolve()，然后返回")]),o._v(" "),_("p",[o._v('如果是第三方模块，例如: require("foo") ，按如下过程查找')]),o._v(" "),_("ol",[_("li",[o._v('require("foo") 先尝试加载 ./node_modules/foo，这种没有扩展名的文件是否存在，有则按照规则加载解析')]),o._v(" "),_("li",[o._v("如果没有，则按照扩展名规则进行查找，依次判断 .js、.json、.node 文件是否存在，有则按照规则加载解析")]),o._v(" "),_("li",[o._v("如果没有，则判断是否存在 ./node_modules/foo 文件夹")]),o._v(" "),_("li",[o._v("如果文件夹存在，则查找 ./node_modules/foo/package.json 是否存在")]),o._v(" "),_("li",[o._v("如果 package.json 存在，则判断是否有 main 字段，如果有则按照 main 中指定的文件路径加载")]),o._v(" "),_("li",[o._v("如果没有指定 main 字段，则尝试加载 ./node_modules/foo/index.js")]),o._v(" "),_("li",[o._v("如果 main 中的路径不存在，并且没有 ./node_modules/foo/index.js 文件，则报错找不到模块")]),o._v(" "),_("li",[o._v("如果 package.json 不存在，则查找 ./node_modules/foo/index.js，有则按照规则加载解析")]),o._v(" "),_("li",[o._v("如果没有，则继续向父级寻找 ../node_modules/foo，重复第一步的过程")]),o._v(" "),_("li",[o._v("如果一直查找到磁盘根目录都没有找到，则报错找不到模块")])])])}),[],!1,null,null,null);e.default=s.exports}}]);