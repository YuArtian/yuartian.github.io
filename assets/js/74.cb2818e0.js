(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{436:function(t,v,_){"use strict";_.r(v);var n=_(45),s=Object(n.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"进程和线程的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的区别"}},[t._v("#")]),t._v(" 进程和线程的区别")]),t._v(" "),_("blockquote",[_("p",[t._v("https://www.zhihu.com/question/25532384")]),t._v(" "),_("p",[t._v("https://www.zhihu.com/question/25532384/answer/81152571")])]),t._v(" "),_("blockquote",[_("p",[t._v("进程是资源分配的最小单位，线程是CPU调度的最小单位")])]),t._v(" "),_("p",[_("strong",[t._v("进程和线程都是一个时间段的描述，是CPU工作时间段的描述")])]),t._v(" "),_("p",[_("strong",[t._v("下面细说背景")]),t._v("：\nCPU+RAM+各种资源（比如显卡，光驱，键盘，GPS, 等等外设）构成我们的电脑，但是电脑的运行，实际就是CPU和相关寄存器以及RAM之间的事情。")]),t._v(" "),_("p",[_("strong",[t._v("一个最最基础的事实")]),t._v("：CPU太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，一句话就是在CPU看来就是轮流着来。")]),t._v(" "),_("p",[_("strong",[t._v("一个必须知道的事实")]),t._v("：执行一段程序代码，实现一个功能的过程介绍 ，当得到CPU的时候，相关的资源必须也已经就位，就是显卡啊，GPS啊什么的必须就位，然后CPU开始执行。这里除了CPU以外所有的就构成了这个程序的执行环境，也就是我们所定义的程序上下文。当这个程序执行完了，或者分配给他的CPU执行时间用完了，那它就要被切换出去，等待下一次CPU的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被CPU临幸的运行环境，必须保存。")]),t._v(" "),_("p",[_("strong",[t._v("串联起来的事实")]),t._v("：前面讲过在CPU看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：***先加载程序A的上下文，然后开始执行A，保存程序A的上下文，调入下一个要执行的程序B的程序上下文，然后开始执行B,保存程序B的上下文*。。。*。")]),t._v(" "),_("p",[t._v("*========= 重要的东西出现了========\n"),_("strong",[t._v("进程和线程"),_("em",[t._v("就是这样的背景出来的")])]),t._v("*，两个名词不过是对应的CPU时间段的描述，名词就是这样的功能。\n***")]),t._v(" "),_("ul",[_("li",[_("strong",[t._v("进程就是包换上下文切换的程序执行时间总和")]),t._v(" = "),_("strong",[t._v("CPU加载上下文+CPU执行+CPU保存上下文")])])]),t._v(" "),_("p",[t._v("***线程是什么呢？\n***进程的颗粒度太大，每次都要有上下的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序A，实际分成 a，b，c等多个块组合而成。那么这里具体的执行就可能变成：")]),t._v(" "),_("p",[t._v("程序A得到CPU =》CPU加载上下文，开始执行程序A的a小段，然后执行A的b小段，然后再执行A的c小段，最后CPU保存A的上下文。")]),t._v(" "),_("p",[t._v("这里a，b，c的执行是共享了A的上下文，CPU在执行的时候没有进行上下文切换的。这**里的a，b，c就是线程，也就是说线程是共享了进程的上下文环境，的更为细小的CPU时间段。")]),t._v(" "),_("p",[t._v("到此全文结束，再一个总结：\n**\n"),_("strong",[t._v("进程和线程都是一个时间段的描述，是CPU工作时间段的描述，不过是颗粒大小不同。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);