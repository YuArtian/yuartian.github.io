(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{615:function(t,e,s){"use strict";s.r(e);var p=s(45),n=Object(p.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"说说对-typescript-中命名空间与模块的理解-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说说对-typescript-中命名空间与模块的理解-区别"}},[t._v("#")]),t._v(" 说说对 TypeScript 中命名空间与模块的理解？区别？")]),t._v(" "),s("blockquote",[s("p",[t._v("https://www.51cto.com/article/681918.html\nhttps://www.tslang.cn/docs/handbook/namespaces-and-modules.html\nhttps://typescript-eslint.io/rules/no-namespace/")])]),t._v(" "),s("p",[t._v("namespace 就是一个普通对象\n是位于全局命名空间下的一个普通的带有名字的 JavaScript 对象，使用起来十分容易\n但就像其它的全局命名空间污染一样，它很难去识别组件之间的依赖关系，尤其是在大型的应用中")]),t._v(" "),s("p",[t._v("TypeScript 与ECMAScript 2015 一样，任何包含顶级 import 或者 export 的文件都被当成一个模块\n相反地，如果一个文件不带有顶级的import或者export声明，那么它的内容被视为全局可见的")]),t._v(" "),s("p",[t._v("现在已经不建议使用 namespace 了, eslint 会报错 （https://typescript-eslint.io/rules/no-namespace/）\n改用 "),s("code",[t._v('declare module "XXX" {}')]),t._v(" 代替")])])}),[],!1,null,null,null);e.default=n.exports}}]);