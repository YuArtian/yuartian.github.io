(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{552:function(e,t,a){"use strict";a.r(t);var s=a(45),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[e._v("#")]),e._v(" Number")]),e._v(" "),a("h1",{attrs:{id:"parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[e._v("#")]),e._v(" parseInt")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" radix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("ul",[a("li",[a("p",[a("code",[e._v("string")])]),e._v(" "),a("p",[e._v("要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用  "),a("code",[e._v("ToString")]),e._v("抽象操作)。字符串开头的空白符将会被忽略。")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("radix")]),e._v(" 可选")]),e._v(" "),a("p",[e._v("从 "),a("code",[e._v("2")]),e._v(" 到 "),a("code",[e._v("36")]),e._v("，代表该进位系统的数字。例如说指定 "),a("code",[e._v("10")]),e._v(" 就等于指定十进位")])])]),e._v(" "),a("p",[e._v("当 radix  小于 "),a("code",[e._v("2")]),e._v(" 或大于 "),a("code",[e._v("36")]),e._v(" ，或 第一个非空格字符不能转换为数字时，返回 NaN")]),e._v(" "),a("p",[e._v("parseInt 函数将其第一个参数转换为一个字符串，对该字符串进行解析，然后返回一个整数或 NaN")]),e._v(" "),a("h1",{attrs:{id:"parsefloat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat"}},[e._v("#")]),e._v(" parseFloat")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("parseFloat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])]),a("p",[e._v("过程：")]),e._v(" "),a("ul",[a("li",[e._v("如果 "),a("code",[e._v("parseFloat")]),e._v(" 在解析过程中遇到了正号（"),a("code",[e._v("+")]),e._v("）、负号（"),a("code",[e._v("-")]),e._v(" U+002D HYPHEN-MINUS）、数字（"),a("code",[e._v("0")]),e._v("-"),a("code",[e._v("9")]),e._v("）、小数点（"),a("code",[e._v(".")]),e._v("）、或者科学记数法中的指数（e 或 E）以外的字符，则它会忽略该字符以及之后的所有字符，返回当前已经解析到的浮点数")]),e._v(" "),a("li",[e._v("第二个小数点的出现也会使解析停止（在这之前的字符都会被解析）")]),e._v(" "),a("li",[e._v("参数首位和末位的空白符会被忽略")]),e._v(" "),a("li",[e._v("如果参数字符串的第一个字符不能被解析成为数字,"),a("code",[e._v("则")]),e._v(" "),a("code",[e._v("parseFloat")]),e._v(" 返回 "),a("code",[e._v("NaN")])]),e._v(" "),a("li",[a("code",[e._v("parseFloat")]),e._v(" 也可以解析并返回 "),a("code",[e._v("Infinity")])]),e._v(" "),a("li",[a("code",[e._v("parseFloat")]),e._v("解析 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("BigInt")]),a("OutboundLink")],1),e._v(" 为 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("Numbers")]),a("OutboundLink")],1),e._v(", 丢失精度。因为末位 "),a("code",[e._v("n")]),e._v(" 字符被丢弃")])])])}),[],!1,null,null,null);t.default=r.exports}}]);