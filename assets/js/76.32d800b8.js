(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{438:function(t,a,e){"use strict";e.r(a);var v=e(45),c=Object(v.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),e("h2",{attrs:{id:"核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心概念"}},[t._v("#")]),t._v(" 核心概念")]),t._v(" "),e("p",[t._v("React 有个 UI = f(data) 公式：UI是由 data 推导出来的，所以在写应用的时候，我们只需要关心数据的改变，只需  data ---\x3e data'， 那么 UI ---\x3e UI' ，在这个过程中，我们其实并不关心UI是怎么变化到UI‘的（即"),e("code",[t._v("DOM")]),t._v("的变化），这部分工作是"),e("code",[t._v("React")]),t._v("替我们处理了")]),t._v(" "),e("p",[t._v("那么"),e("code",[t._v("React")]),t._v("是如何知道当数据变化的时候，需要修改哪些"),e("code",[t._v("DOM")]),t._v("的呢？最简单暴力的是，每次都重新构建整个DOM树。实际上，React 使用的是一种叫 "),e("code",[t._v("virtual-dom")]),t._v(" 的技术：用JS对象来表示DOM结构，通过比较前后JS对象的差异，来获得DOM树的 增量修改。"),e("code",[t._v("virtual-dom")]),t._v(" 通过 diff 计算，大大减少了DOM操作，让"),e("code",[t._v("UI = f(data)")]),t._v("这种模型性能不是那么的慢，当然你用原生"),e("code",[t._v("JS/jquery")]),t._v("直接操作DOM永远是最快的")])])}),[],!1,null,null,null);a.default=c.exports}}]);